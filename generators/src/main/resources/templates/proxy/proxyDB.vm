import io.netty.bootstrap.Bootstrap;
import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.*;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.util.ReferenceCountUtil;

import java.io.*;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

@SuppressWarnings("deprecation")
public class $className {

    private static final String LOG_ROOT = "/tmp/logs/";
    #if ($proxyIdentifier != $null)
    private static final String PROXY_IDENTIFIER = "${proxyIdentifier}";
    #else
    private static final String PROXY_IDENTIFIER = "default";
    #end
    private static final long BOOT_TIMESTAMP = System.currentTimeMillis();
    private static final Random RANDOM = new Random();

    private static final String PROXY_TARGET = System.getenv("JDBC_PROXY_TARGET");

    #if($after != $null)
    // --after
    private static final long AFTER_TIME = $after;
    private static final long BLOCKED_UNTIL = BOOT_TIMESTAMP + AFTER_TIME;
    #end
    #if($timeout != $null)
    // --timeout
    private static final long TIMEOUT = $timeout;
    private static final long BLOCKED_TIMEOUT =  BOOT_TIMESTAMP + TIMEOUT;
    #end

    public static void main(String[] args) throws InterruptedException {
        log("booting " + PROXY_IDENTIFIER + " for args: " + PROXY_TARGET);
        String[] hostPortArray = PROXY_TARGET.split(":");
        assert hostPortArray.length == 2;
        String host = hostPortArray[0];
        Integer port = Integer.parseInt(hostPortArray[1]);

        EventLoopGroup bossGroup = new NioEventLoopGroup(1);
        EventLoopGroup workerGroup = new NioEventLoopGroup();

        ServerBootstrap bootstrap = new ServerBootstrap();
        bootstrap.group(bossGroup, workerGroup)
                .channel(NioServerSocketChannel.class)
                .childHandler(new ChannelInitializer<SocketChannel>() {
                    @Override
                    protected void initChannel(SocketChannel clientChannel) {
                        Bootstrap dbBootstrap = new Bootstrap();
                        dbBootstrap.group(clientChannel.eventLoop())
                                .channel(NioSocketChannel.class)
                                .option(ChannelOption.SO_REUSEADDR, true)
                                .handler(new ChannelInitializer<SocketChannel>() {
                                    @Override
                                    protected void initChannel(SocketChannel dbChannel) {
                                        //do nothing here
                                    }
                                });

                        clientChannel.config().setAutoRead(false); // Pause reading from client
                        dbBootstrap.connect(host, port).addListener((ChannelFutureListener) future -> {
                            if (future.isSuccess()) {
                                Channel dbChannel = future.channel();
                                dbChannel.pipeline().addLast(new RelayHandler(clientChannel));
                                clientChannel.pipeline().addLast(new RelayHandler(dbChannel));
                                clientChannel.config().setAutoRead(true); // Now start reading from client
                            } else {
                                future.cause().printStackTrace();
                                clientChannel.close();
                            }
                        });
                    }
                });

        try {
            ChannelFuture f = bootstrap.bind(port).sync();
            log(PROXY_IDENTIFIER + " started on port " + port + " proxying to " + PROXY_TARGET);
            f.channel().closeFuture().sync();
        } finally {
            bossGroup.shutdownGracefully();
            workerGroup.shutdownGracefully();
        }
    }

    static class RelayHandler extends ChannelInboundHandlerAdapter {
        private final Channel otherChannel;

        RelayHandler(Channel otherChannel) {
            this.otherChannel = otherChannel;
        }

        @Override
        public void channelRead(ChannelHandlerContext ctx, Object msg) {
            if (otherChannel.isActive()) {
                long currentMillis = System.currentTimeMillis();
                #if($after != $null)
                // --after
                if (currentMillis <= BLOCKED_UNTIL) {
                    System.out.println("System has not reachable (after-key).");
                    triggerJDBCSocketTimeout(ctx, msg);
                    return;
                }
                #end
                #if($timeout != $null)
                // --timeout
                if (TIMEOUT != -1 && currentMillis > BLOCKED_TIMEOUT) {
                    System.out.println("System timed out.");
                    triggerJDBCSocketTimeout(ctx, msg);
                    return;
                }
                #end
                #if($dropout != $null)
                    // --dropout
                    if (dropout($dropout)) {
                        System.out.println("dropping proxy package");
                        triggerJDBCSocketTimeout(ctx, msg);
                        return;
                    }
                #end
                #if($delay != $null)
                // --delay
                ctx.executor().schedule(() -> {
                    otherChannel.writeAndFlush(msg);
                }, $delay, TimeUnit.MILLISECONDS);
                #else
                otherChannel.writeAndFlush(msg);
                #end
                System.out.println(msg);
            } else {
                System.out.println("channel is inactive.");
                ReferenceCountUtil.release(msg);
            }
        }

        @Override
        public void channelInactive(ChannelHandlerContext ctx) {
            if (otherChannel.isActive()) {
                otherChannel.close();
            }
        }

        @Override
        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
            cause.printStackTrace();
            ctx.close();
        }

        private void triggerJDBCSocketTimeout(ChannelHandlerContext ctx, Object msg){
            // Simulate timeout by delaying far beyond JDBC's default socket timeout
            ctx.executor().schedule(() -> {
                if (otherChannel.isActive()) {
                    otherChannel.writeAndFlush(msg);
                } else {
                    ReferenceCountUtil.release(msg);
                }
            }, 15000, TimeUnit.MILLISECONDS); // e.g., 15 seconds delay
            return;
        }
    }

    private static void log(String message) {
            try {
                File logFile = new File(LOG_ROOT + "dbServerProxy.log");
                File parentDir = logFile.getParentFile();
                if (parentDir != null && !parentDir.exists()) {
                    parentDir.mkdirs(); // Create parent directories if they don't exist
                }

                try (FileWriter writer = new FileWriter(logFile, true)) {
                    String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                    writer.write(timestamp + " - " + message + System.lineSeparator());
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    public static boolean dropout(double dropProbability){
        return RANDOM.nextDouble() < dropProbability;
    }
}