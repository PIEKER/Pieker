import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.Headers;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Random;

//PROXY-SERVER
public class $className {
    private static final String LOG_ROOT = "/tmp/logs/";
    #if ($proxyIdentifier != $null)
    private static final String PROXY_IDENTIFIER = "${proxyIdentifier}";
    #else
    private static final String PROXY_IDENTIFIER = "default";
    #end
    private static final long BOOT_TIMESTAMP = System.currentTimeMillis();
    private static final Random RANDOM = new Random();

    #if($after != $null)
    // --after
    private static final long AFTER_TIME = $after;
    private static final long BLOCKED_UNTIL = BOOT_TIMESTAMP + AFTER_TIME;
    #end
    #if($timeout != $null)
    // --timeout
    private static final long TIMEOUT = $timeout;
    private static final long BLOCKED_TIMEOUT =  BOOT_TIMESTAMP + TIMEOUT;
    #end

    public static void main(String[] args) throws Exception {
        // Create an HTTP server that listens on port 80
        HttpServer server = HttpServer.create(new InetSocketAddress(80), 1024);

        String host = System.getenv("TARGET-PROXY-HOST");
        String port = System.getenv("TARGET-PROXY-PORT");

        if (host == null || host.isBlank()){
            throw new RuntimeException("unable to start server: no host-url in system found.");
        }
        if (port == null || port.isBlank()){
            throw new RuntimeException("unable to start server: no host-url in system found.");
        }

        // Define the root context ("/")
        server.createContext("/", exchange -> {
            long currentMillis = System.currentTimeMillis();

            /*
             -- DSL LOGIC START
             */

            #if($after != $null)
            // --after
            if (currentMillis <= BLOCKED_UNTIL){
                log("Simulating socket disconnect (after)");

                // Close the socket without sending any response headers
                try {
                    exchange.getRequestBody().close();
                    exchange.getResponseBody().close();
                    exchange.close();
                } catch (Exception ignored) {
                    // We expect exceptions here since we’re forcefully dropping connection
                }
                return;
            }
            #end

            #if($timeout != $null)
            // --timeout
            if (TIMEOUT != -1 && currentMillis > BLOCKED_TIMEOUT){
                log("Simulating socket disconnect (timeout)");

                // Close the socket without sending any response headers
                try {
                    exchange.getRequestBody().close();
                    exchange.getResponseBody().close();
                    exchange.close();
                } catch (Exception ignored) {
                    // We expect exceptions here since we’re forcefully dropping connection
                }
                return;
            }
            #end

            #if($delay != $null)
            // --delay
            delay($delay);
            #end

            #if($dropout != $null)
            // --dropout
            if (dropout($dropout)) return;
            #end

            /*
             -- DSL LOGIC END
             */

            String targetUrl = "http://" + host + ":" + port + exchange.getRequestURI();
            proxy(exchange, targetUrl); // -- BOILERPLATE PROXY
        });

        // Start the server
        server.start();
        log("Proxy " + PROXY_IDENTIFIER + " is running on port 80");
    }

    private static void proxy(HttpExchange exchange, String targetUrl) throws IOException {
        try {
            HttpURLConnection connection = (HttpURLConnection) new URI(targetUrl).toURL().openConnection();
            connection.setRequestMethod(exchange.getRequestMethod());

            // Copy request headers
            exchange.getRequestHeaders().forEach((key, values) ->
                    values.forEach(value -> connection.addRequestProperty(key, value))
            );
            // Forward request body if present
            if ("POST".equalsIgnoreCase(exchange.getRequestMethod()) || "PUT".equalsIgnoreCase(exchange.getRequestMethod())) {
                connection.setDoOutput(true);
                try (OutputStream outputStream = connection.getOutputStream()) {
                    exchange.getRequestBody().transferTo(outputStream);
                }
            }

            // Get response
            int responseCode = connection.getResponseCode();
            InputStream inputStream = (responseCode >= 400)
                    ? connection.getErrorStream()
                    : connection.getInputStream();

            byte[] responseBytes = (inputStream != null) ? inputStream.readAllBytes() : new byte[0];
            #if($enableLogging == true)
            String responseText = new String(responseBytes, StandardCharsets.UTF_8);
            log(PROXY_IDENTIFIER + " - " + new ResponseTuple(responseText, responseCode));
            #end

            // Prepare response headers
            Headers responseHeaders = exchange.getResponseHeaders();
            connection.getHeaderFields().forEach((key, values) -> {
                if (key != null && values != null) {
                    // Avoid headers that are restricted or duplicated (like Content-Length)
                    if (!key.equalsIgnoreCase("Transfer-Encoding") &&
                            !key.equalsIgnoreCase("Content-Length") &&
                            !key.equalsIgnoreCase("Connection")) {
                        responseHeaders.put(key, values);
                    }
                }
            });

            // Ensure necessary headers are present
            if (!responseHeaders.containsKey("Content-Type")) {
                responseHeaders.set("Content-Type", "text/plain; charset=utf-8");
            }
            responseHeaders.set("Connection", "close");

            // Send response
            exchange.sendResponseHeaders(responseCode, responseBytes.length);
            try (OutputStream responseBody = exchange.getResponseBody()) {
                responseBody.write(responseBytes);
                responseBody.flush();
            }

        } catch (Exception e) {
            exchange.sendResponseHeaders(500, 0);
            try (OutputStream responseBody = exchange.getResponseBody()) {
                String errorMessage = "Proxy error: " + e.getMessage();
                responseBody.write(errorMessage.getBytes(StandardCharsets.UTF_8));
            }
            log("Error proxying request: " + e.getMessage());
        }
    }

    private static void log(String message) {
        try {
            File logFile = new File(LOG_ROOT + PROXY_IDENTIFIER + ".log");
            File parentDir = logFile.getParentFile();
            if (parentDir != null && !parentDir.exists()) {
                parentDir.mkdirs(); // Create parent directories if they don't exist
            }

            try (FileWriter writer = new FileWriter(logFile, true)) {
                String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                writer.write(timestamp + " - " + message + System.lineSeparator());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private record ResponseTuple(String response, int statusCode){
        public String toString(){
            return "REQUEST-STATUS{" + this.statusCode + "} REQUEST-MESSAGE{" + this.response + "}";
        }
    }

    /*
        -- KEYWORD UTIL
    */
    public static void delay(long delay){
        if (delay > 0){
            try {
                Thread.sleep(delay); // Pause execution for the specified time
            } catch (InterruptedException e) {
                e.printStackTrace();
                Thread.currentThread().interrupt();
            }
        }
    }

    public static boolean dropout(double dropProbability){
        return RANDOM.nextDouble() < dropProbability;
    }
}
