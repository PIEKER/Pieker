import java.io.*;
import java.net.*;
import java.nio.charset.StandardCharsets;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

import org.json.JSONObject; // requires json.jar

//TRAFFIC-CONTAINER
public class $className {
    private static final String LOG_ROOT = "/tmp/logs/";
    private static final Random RANDOM = new Random();

    private static final String SERVICE_BASE_URL = System.getenv("SERVICE_BASE_URL");

    private static final String DB_URL = System.getenv("DB_URL");
    private static final String DB_USER = System.getenv("DB_USER");
    private static final String DB_PASS = System.getenv("DB_PASS");

    public static void main(String[] args) {
        System.out.println("Can write to /app/logs: " + new File("/app/logs").canWrite());
        System.out.println("Can write to /tmp/logs: " + new File(LOG_ROOT).canWrite());

        ${threadBody}
        #if ($trafficIdentifierList.size() > 0)
        try {
        #foreach( $trafficIdentifier in $trafficIdentifierList )
            ${trafficIdentifier}.join();
        #end
        } catch (InterruptedException e) {
            log("${trafficIdentifier}", e.getMessage());
        }
        #end
    }

    // -- SQL
    public static ResponseTuple executeSQL(String dbUrl, String dbUser, String dbPassword, String sqlQuery) {
        try (Connection connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword);
             Statement statement = connection.createStatement()) {

            boolean hasResultSet = statement.execute(sqlQuery);

            if (hasResultSet) {
                try (ResultSet resultSet = statement.getResultSet()) {
                    return new ResponseTuple(createResultString(resultSet), 200);
                }
            } else {
                int affectedRows = statement.getUpdateCount();
                return new ResponseTuple("Query executed successfully, affected rows: " + affectedRows, 200);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return new ResponseTuple("[SQL-ERROR] " + e.getMessage(), 400);
        }
    }

    private static String createResultString(ResultSet resultSet) throws SQLException {
            StringBuilder resultString = new StringBuilder();
            int columnCount = resultSet.getMetaData().getColumnCount();

            while (resultSet.next()) {
                for (int i = 1; i <= columnCount; i++) {
                    resultString.append(resultSet.getString(i));
                    if (i < columnCount) {
                        resultString.append(", "); // Separator for columns
                    }
                }
                resultString.append("|"); // New line for each row
            }
            return resultString.toString();
        }

    // -- perform HTTP
    public static ResponseTuple sendHttpRequest(String urlString, String requestMethod, int connectTimeout, int readTimeout,
                                                Map<String, String> headers, String requestBody) throws IOException, URISyntaxException {
        URL url = new URI(SERVICE_BASE_URL + urlString).toURL();
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        // Set request method and timeouts
        connection.setRequestMethod(requestMethod);
        connection.setConnectTimeout(connectTimeout);
        connection.setReadTimeout(readTimeout);

        // Set headers
        for (Map.Entry<String, String> header : headers.entrySet()) {
            connection.setRequestProperty(header.getKey(), header.getValue());
        }

        // Only set doOutput and write body for POST/PUT with a non-empty request body
        if ((requestMethod.equalsIgnoreCase("POST") || requestMethod.equalsIgnoreCase("PUT")) && requestBody != null && !requestBody.isEmpty()) {
            connection.setDoOutput(true);
            try (OutputStream os = connection.getOutputStream()) {
                os.write(requestBody.getBytes(StandardCharsets.UTF_8));
            }
        }

        // Read the response
        InputStream inputStream;
        int responseCode = connection.getResponseCode();
        if (responseCode >= 400) {
            inputStream = connection.getErrorStream();
        } else {
            inputStream = connection.getInputStream();
        }

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            return new ResponseTuple(response.toString(), responseCode);
        }
    }

    private static InputStream getInputStream(String requestBody, HttpURLConnection connection) throws IOException {
        if (requestBody != null && !requestBody.isEmpty()) {
            try (OutputStream os = connection.getOutputStream()) {
                byte[] input = requestBody.getBytes(StandardCharsets.UTF_8);
                os.write(input, 0, input.length);
            }
        }

        // Read response
        return (connection.getResponseCode() < HttpURLConnection.HTTP_BAD_REQUEST)
                ? connection.getInputStream() : connection.getErrorStream();
    }

    public static Map<String, String> jsonToMap(String jsonString) {
        Map<String, String> map = new HashMap<>();
        if (jsonString == null || jsonString.isEmpty()) {
            return map;
        }
        JSONObject jsonObject = new JSONObject(jsonString);
        for (String key : jsonObject.keySet()) {
            map.put(key, jsonObject.getString(key));
        }
        return map;
    }

    private static void log(String filename, String message) {
        try {
            File logFile = new File(LOG_ROOT + filename + ".log");
            File parentDir = logFile.getParentFile();
            if (parentDir != null && !parentDir.exists()) {
                parentDir.mkdirs(); // Create parent directories if they don't exist
            }

            try (FileWriter writer = new FileWriter(logFile, true)) {
                String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                writer.write(timestamp + " - " + message + System.lineSeparator());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private record ResponseTuple(String response, int statusCode){
        public String toString(){
            return "REQUEST-STATUS{" + this.statusCode + "}-REQUEST-MESSAGE{" + this.response + "}";
        }
    }

    /*
            -- KEYWORD UTIL
        */
        public static void delay(long delay){
            if (delay > 0){
                try {
                    Thread.sleep(delay); // Pause execution for the specified time
                } catch (InterruptedException e) {
                    e.printStackTrace();
                    Thread.currentThread().interrupt();
                }
            }
        }

        public static boolean dropout(double dropProbability){
            return RANDOM.nextDouble() < dropProbability;
        }
}