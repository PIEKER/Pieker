import java.nio.charset.StandardCharsets;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.io.*;
import java.util.*;
import java.util.concurrent.TimeUnit;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import okhttp3.*;


//TRAFFIC-CONTAINER
public class $className {
    private static final Gson GSON = new Gson();
    private static final Random RANDOM = new Random();
    private static final String LOG_ROOT = "/tmp/logs/";
    private static final String SERVICE_BASE_URL = System.getenv("SERVICE_BASE_URL");
    private static final String DB_URL = System.getenv("DB_URL");
    private static final String DB_USER = System.getenv("DB_USER");
    private static final String DB_PASS = System.getenv("DB_PASS");

    public static void main(String[] args) {

        ${threadBody}
        #if ($trafficIdentifierList != $null && $trafficIdentifierList.size() > 0)
        try {
        #foreach( $trafficIdentifier in $trafficIdentifierList )
            ${trafficIdentifier}.join();
        #end
        } catch (InterruptedException e) {
            log("some-traffic-thread", e.getMessage());
        }
        #end
    }

    // -- SQL
    public static ResponseTuple executeSQL(String dbUrl, String dbUser, String dbPassword, String sqlQuery) {
        try (java.sql.Connection connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword);
             Statement statement = connection.createStatement()) {

            boolean hasResultSet = statement.execute(sqlQuery);

            if (hasResultSet) {
                try (ResultSet resultSet = statement.getResultSet()) {
                    return new ResponseTuple(createResultString(resultSet), 200);
                }
            } else {
                int affectedRows = statement.getUpdateCount();
                return new ResponseTuple("Query executed successfully, affected rows: " + affectedRows, 200);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return new ResponseTuple("[SQL-ERROR] " + e.getMessage(), 400);
        }
    }

    private static String createResultString(ResultSet resultSet) throws SQLException {
            StringBuilder resultString = new StringBuilder();
            int columnCount = resultSet.getMetaData().getColumnCount();

            while (resultSet.next()) {
                for (int i = 1; i <= columnCount; i++) {
                    resultString.append(resultSet.getString(i));
                    if (i < columnCount) {
                        resultString.append(", "); // Separator for columns
                    }
                }
                resultString.append("|"); // New line for each row
            }
            return resultString.toString();
        }

    // -- perform HTTP
    public static ResponseTuple sendHttpRequest(String url, String method, int connectionTimeout, int readTimeout,
                                     String jsonHeaders, String requestBody, String bodyType) {
        try {
            OkHttpClient client = new OkHttpClient.Builder()
                    .connectTimeout(connectionTimeout, TimeUnit.MILLISECONDS)
                    .readTimeout(readTimeout, TimeUnit.MILLISECONDS)
                    .build();

            // Parse headers
            Map<String, String> headersMap = jsonToMap(jsonHeaders);
            Headers.Builder headersBuilder = new Headers.Builder();
            for (Map.Entry<String, String> entry : headersMap.entrySet()) {
                headersBuilder.add(entry.getKey(), entry.getValue());
            }

            // Build request body based on bodyType
            RequestBody body = null;
            if (method.equalsIgnoreCase("POST") || method.equalsIgnoreCase("PUT")) {
                Map<String, Object> bodyMap = jsonToMapObject(requestBody);

                switch (bodyType.toLowerCase()) {
                    case "json":
                        String json = GSON.toJson(bodyMap);
                        body = RequestBody.create(json, MediaType.parse("application/json"));
                        break;

                    case "form":
                        FormBody.Builder formBuilder = new FormBody.Builder();
                        for (Map.Entry<String, Object> entry : bodyMap.entrySet()) {
                            formBuilder.add(entry.getKey(), entry.getValue().toString());
                        }
                        body = formBuilder.build();
                        break;

                    case "multipart":
                        MultipartBody.Builder multipartBuilder = new MultipartBody.Builder().setType(MultipartBody.FORM);
                        for (Map.Entry<String, Object> entry : bodyMap.entrySet()) {
                            multipartBuilder.addFormDataPart(entry.getKey(), entry.getValue().toString());
                        }
                        body = multipartBuilder.build();
                        break;

                    default:
                        throw new IllegalArgumentException("Unsupported body type: " + bodyType);
                }
            }

            Request.Builder requestBuilder = new Request.Builder()
                    .url(SERVICE_BASE_URL + url)
                    .method(method, body)
                    .headers(headersBuilder.build());

            Response response = client.newCall(requestBuilder.build()).execute();

            if (response.body() != null) {
                return new ResponseTuple(response.body().string(), response.code());
            } else {
                return new ResponseTuple("NO BODY", response.code());
            }
        } catch (Exception e) {
            return new ResponseTuple("Exception occurred while sending request. Exception: " + e.getMessage(), 400);
        }
    }

    private static Map<String, Object> jsonToMapObject(String json) {
        if (json == null || json.trim().isEmpty()) {
            return Map.of();
        }
        return GSON.fromJson(json, new TypeToken<Map<String, Object>>(){}.getType());
    }

    private static Map<String, String> jsonToMap(String json) {
        if (json == null || json.trim().isEmpty()) {
            return Map.of();
        }
        return GSON.fromJson(json, new TypeToken<Map<String, Object>>(){}.getType());
    }

    private static void log(String filename, String message) {
        try {
            File logFile = new File(LOG_ROOT + filename + ".log");
            File parentDir = logFile.getParentFile();
            if (parentDir != null && !parentDir.exists()) {
                parentDir.mkdirs(); // Create parent directories if they don't exist
            }

            try (FileWriter writer = new FileWriter(logFile, true)) {
                String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                writer.write(timestamp + " - " + message + System.lineSeparator());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private record ResponseTuple(String response, int statusCode){
        public String toString(){
            return "REQUEST-STATUS{" + this.statusCode + "}-REQUEST-MESSAGE{" + this.response + "}";
        }
    }

    /*
            -- KEYWORD UTIL
        */
        public static void delay(long delay){
            if (delay > 0){
                try {
                    Thread.sleep(delay); // Pause execution for the specified time
                } catch (InterruptedException e) {
                    e.printStackTrace();
                    Thread.currentThread().interrupt();
                }
            }
        }

        public static boolean dropout(double dropProbability){
            return RANDOM.nextDouble() < dropProbability;
        }
}